/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto2.presentation.categoria.edicion;

import java.util.Observable;
import proyecto2.logic.Categoria;

/**
 *
 * @author Dani
 */
public class CategoriaView extends javax.swing.JInternalFrame implements java.util.Observer {

    CategoriaController controller;
    CategoriaModel model;

    public CategoriaController getController() {
        return controller;
    }

    public void setController(CategoriaController controller) {
        this.controller = controller;
    }

    public CategoriaModel getModel() {
        return model;
    }

    public void setModel(CategoriaModel model) {
        this.model = model;
    }

    public CategoriaView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

   @Override
    public void update(Observable o, Object arg) {
//        this.limpiarErrores();
//        Categoria actual = model.getCurrent(); //ver quien es actual??
//        this.fromPersona(actual);
    }

//    public boolean validar() { //Retorna true si no hay errores
//        boolean error = false;
//
//        this.idlabel.setForeground(Application.COLOR_OK);
//        if (this.ID.getText().isEmpty()) {
//            this.idlabel.setForeground(Application.COLOR_ERROR);
//            error = true;
//        }
//        this.nombreLab.setForeground(Application.COLOR_OK);
//        if (this.Nombre.getText().isEmpty()) {
//            this.nombreLab.setForeground(Application.COLOR_ERROR);
//            error = true;
//        }
//        return !error;
//    }
//
//    Funcionario creaFuncionario() {
//        Funcionario func = new Funcionario();
//        func.setId(ID.getText());
//        func.setNombre(Nombre.getText());
//        System.out.println(Nombre.getName());
//        return func;
//    }
//
//    public void limpiarErrores() {
//        this.idlabel.setForeground(Application.COLOR_OK);
//        this.nombreLab.setForeground(Application.COLOR_OK);
//    }
//
//    public void fromPersona(Funcionario actual) {
//        //si el modo agrega, se pone disponible(enabled)
//        this.ID.setEnabled(model.getModo() == Application.MODO_AGREGAR);
//        ID.setText(actual.getId());
//        Boolean editable = Arrays.asList(Application.MODO_AGREGAR, Application.MODO_EDITAR).contains(model.getModo());
//
//        Nombre.setEnabled(editable);
//        Nombre.setText(actual.getNombre());
//
//        this.guardar.setVisible(editable);
//        this.validate();
//    }
}
